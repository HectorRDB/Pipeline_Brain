sc3 <- colData(sc3)[, paste0("sc3_", k, "_clusters")]
library(clusterExperiment)
library(stringr)
library(SummarizedExperiment)
library(parallel)
library(matrixStats)
library(ggplot2)
library(dplyr)
library(tidyr)
plotARIs <- function(ARI) {
p <- ARI %>% as.data.frame() %>%
mutate(label = rownames(ARI)) %>%
gather(key = label2, value = ari, -(ncol(ARI) + 1)) %>%
ggplot(aes(x = label, y = label2, fill = ari)) +
geom_tile() +
guides(fill = F) +
scale_fill_viridis_c() +
theme_classic() +
theme(axis.line = element_blank()) +
geom_text(aes(label = round(ari, 2)))
return(p)
}
clusMat <- readRDS("../../seurat_ARI.rds")
plotARIs(clusMat)
plotARIs <- function(ARI) {
p <- ARI %>% as.data.frame() %>%
mutate(label = rownames(ARI)) %>%
gather(key = label2, value = ari, -(ncol(ARI) + 1)) %>%
ggplot(aes(x = label, y = label2, fill = ari)) +
geom_tile() +
# guides(fill = F) +
scale_fill_viridis_c() +
theme_classic() +
theme(axis.line = element_blank()) +
# geom_text(aes(label = round(ari, 2))) +
NULL
return(p)
}
plotARIs(clusMat)
plotARIs(clusMat) +
ggtitle("Seurat concordance: ARIs for every pair of pais of parameters (resolution and k.param)")
library(Seurat)
library(tidyverse)
clusMat <- readRDS("../../seurat_ARI.rds")
plotARIs(clusMat) +
ggtitle("Seurat concordance: ARIs for every pair of pais of parameters (resolution and k.param)")
library(ggplot2)
library(dplyr)
library(tidyr)
plotARIs <- function(ARI) {
p <- ARI %>% as.data.frame() %>%
mutate(label = rownames(ARI)) %>%
gather(key = label2, value = ari, -(ncol(ARI) + 1)) %>%
ggplot(aes(x = label, y = label2, fill = ari)) +
geom_tile() +
guides(fill = F) +
scale_fill_viridis_c() +
theme_classic() +
theme(axis.line = element_blank()) +
geom_text(aes(label = round(ari, 2))) +
NULL
return(p)
}
View(clusMat)
plotARIs(clusMat2) +
ggtitle("Seurat concordance: ARIs for every pair of pais of parameters (resolution and k.param)")
ind <- str_detect(rownames(clusMat), "10$")
clusMat2 <- clusMat[!ind, !ind]
plotARIs(clusMat2) +
ggtitle("Seurat concordance: ARIs for every pair of pais of parameters (resolution and k.param)")
library(clusterExperiment)
library(stringr)
library(zinbwave)
library(SummarizedExperiment)
a <- rep(1:3, 3)
a
b <- rep(c("A", "B", "C"), 3)
b
adjustedRandIndex(a, b)
library(mclust)
a <- rep(1:3, 3)
a
b <- rep(c("A", "B", "C"), 3)
b
adjustedRandIndex(a, b)
a <- sample(1:3, 9, replace = TRUE)
a
b <- sample(c("A", "B", "C"), 9, replace = TRUE)
b
adjustedRandIndex(a, b)
a <- rep(1:3, 4)
a
b <- rep(c("A", "B", "C", "D"), 3)
b
adjustedRandIndex(a, b)
plotARIs <- function(ARI, small = T) {
p <- ARI %>% as.data.frame() %>%
mutate(label = rownames(ARI)) %>%
gather(key = label2, value = ari, -(ncol(ARI) + 1)) %>%
ggplot(aes(x = label, y = label2, fill = ari)) +
geom_tile() +
scale_fill_viridis_c(limits = c(0, 1)) +
theme_classic() +
theme(axis.line = element_blank())
if (small) {
p <- p  +
geom_text(aes(label = round(ari, 2))) +
guides(fill = F)
}
return(p)
}
seurat_params <- function(seurat_ARI) {
tree <- as.dendrogram(hclust(dist(seurat_ARI)))
inds1 <- unlist(tree[[1]])
inds2 <- unlist(tree[[2]])
seurat_ARI1 <- seurat_ARI[inds1, inds1]
seurat_ARI2 <- seurat_ARI[inds2, inds2]
param1 <- names(which.max(colMeans(seurat_ARI1)))
param2 <- names(which.max(colMeans(seurat_ARI2)))
print(param1)
print(param2)
return(c(param1, param2))
}
mergeManyPairwise <- function(clusteringMatrix, nCores = 3) {
# Turn the matrix into a numeric matrix
clusMat <- apply(clusteringMatrix, 2, function(x) {
x[x != "-1"] <- as.numeric(factor(x[x != "-1"]))
x[x == "-1"] <- -1
x <- as.integer(x)
})
# Initialize the values
clusters <- apply(clusMat, 2, unique)
currentMat <- clusMat
baseARI <- apply(clusMat, 2, function(x) {
apply(clusMat, 2, function(y) {
mclust::adjustedRandIndex(x, y)
})
bestARI <- baseARI
working <- TRUE
merges <- NULL
# Try to see if any merge would increse
while (working) {
# Test all pairwise clusters to merge
# For every cluster label list
mergeResults <- mclapply(1:ncol(currentMat), function(whClus) {
clus <- currentMat[, whClus]
clusternames <- clusters[[whClus]]
clusPairs <- combn(clusternames[clusternames != -1], 2)
# For every pair of labels in that list
deltaARI <- apply(clusPairs, 2, function(pair) {
sapply((1:ncol(clusMat))[-whClus], function(otherClus) {
clus[clus %in% pair] <- max(clus) + 1
mclust::adjustedRandIndex(clus, currentMat[, otherClus])
})
}) - bestARI[whClus, -whClus]
return(colMeans(deltaARI))
}, mc.cores = nCores)
# Find best pair to merge
maxs <- sapply(mergeResults, max)
# Only merge if it improves ARI
if (max(maxs) > 0) {
whClus <- which.max(maxs)
# update clusters
clusternames <- clusters[[whClus]]
clusPairs <- combn(clusternames[clusternames != -1], 2)
pair <- clusPairs[, which.max(mergeResults[[whClus]])]
indsPair <- which(currentMat[, whClus] %in% pair)
currentMat[indsPair, whClus] <- min(pair)
clusters[[whClus]] <- unique(currentMat[, whClus])
# update bestARI
newARIs <- sapply((1:ncol(currentMat))[-whClus], function(j) {
mclust::adjustedRandIndex(currentMat[, whClus], currentMat[, j])
})
bestARI[whClus, -whClus] <- newARIs
bestARI[-whClus, whClus] <- newARIs
# tracking
merges <- rbind(merges, c(whClus, pair))
print(c(whClus, pair))
} else {
working <- FALSE
}
# If no more to merge in any of them, stop
if (sum(sapply(clusters, length) == 1) == length(clusters)) stop()
}
colnames(merges) <- c("clustering", "cluster1", "cluster2")
return(list("currentMat" = currentMat,
"merges" = merges))
}
clusMat <- readRDS("../data/SMARTer_cells_MOp_Consensus_Clustering.rds")
clusMat <- clusMat$currentMat
View(clusMat)
clusMat2 <- clustMat[clustMat[,"Rsec"] != -1, ]
clusMat2 <- clusMat[clusMat[,"Rsec"] != -1, ]
FinalARI <- apply(clusMat2, 2, function(x) {
apply(clusMat2, 2, function(y) {
mclust::adjustedRandIndex(x, y)
})
p <- plotARIs(FinalARI) +
ggtitle("ARI after any merging")
p
library(tidyverse)
p <- plotARIs(FinalARI) +
ggtitle("ARI after any merging")
p
clusMat <- readRDS("../data/SMARTer_cells_MOp_Consensus_Clustering.rds")
clusMat <- clusMat$currentMat
clusMat2 <- clusMat[clusMat[,"Rsec"] != -1, ]
FinalARI <- apply(clusMat2, 2, function(x) {
apply(clusMat2, 2, function(y) {
mclust::adjustedRandIndex(x, y)
})
p <- plotARIs(FinalARI) +
ggtitle("ARI after any merging")
plotARIs <- function(ARI, small = T) {
p <- ARI %>% as.data.frame() %>%
mutate(label = rownames(ARI)) %>%
gather(key = label2, value = ari, -(ncol(ARI) + 1)) %>%
ggplot(aes(x = label, y = label2, fill = ari)) +
geom_tile() +
scale_fill_viridis_c(limits = c(0, 1)) +
theme_classic() +
theme(axis.line = element_blank())
if (small) {
p <- p  +
geom_text(aes(label = round(ari, 2))) +
guides(fill = F)
}
return(p)
}
seurat_params <- function(seurat_ARI) {
tree <- as.dendrogram(hclust(dist(seurat_ARI)))
inds1 <- unlist(tree[[1]])
inds2 <- unlist(tree[[2]])
seurat_ARI1 <- seurat_ARI[inds1, inds1]
seurat_ARI2 <- seurat_ARI[inds2, inds2]
param1 <- names(which.max(colMeans(seurat_ARI1)))
param2 <- names(which.max(colMeans(seurat_ARI2)))
print(param1)
print(param2)
return(c(param1, param2))
}
mergeManyPairwise <- function(clusteringMatrix, nCores = 3) {
# Turn the matrix into a numeric matrix
clusMat <- apply(clusteringMatrix, 2, function(x) {
x[x != "-1"] <- as.numeric(factor(x[x != "-1"]))
x[x == "-1"] <- -1
x <- as.integer(x)
})
# Initialize the values
clusters <- apply(clusMat, 2, unique)
currentMat <- clusMat
baseARI <- apply(clusMat, 2, function(x) {
apply(clusMat, 2, function(y) {
mclust::adjustedRandIndex(x, y)
})
bestARI <- baseARI
working <- TRUE
merges <- NULL
# Try to see if any merge would increse
while (working) {
# Test all pairwise clusters to merge
# For every cluster label list
mergeResults <- mclapply(1:ncol(currentMat), function(whClus) {
clus <- currentMat[, whClus]
clusternames <- clusters[[whClus]]
clusPairs <- combn(clusternames[clusternames != -1], 2)
# For every pair of labels in that list
deltaARI <- apply(clusPairs, 2, function(pair) {
sapply((1:ncol(clusMat))[-whClus], function(otherClus) {
clus[clus %in% pair] <- max(clus) + 1
mclust::adjustedRandIndex(clus, currentMat[, otherClus])
})
}) - bestARI[whClus, -whClus]
return(colMeans(deltaARI))
}, mc.cores = nCores)
# Find best pair to merge
maxs <- sapply(mergeResults, max)
# Only merge if it improves ARI
if (max(maxs) > 0) {
whClus <- which.max(maxs)
# update clusters
clusternames <- clusters[[whClus]]
clusPairs <- combn(clusternames[clusternames != -1], 2)
pair <- clusPairs[, which.max(mergeResults[[whClus]])]
indsPair <- which(currentMat[, whClus] %in% pair)
currentMat[indsPair, whClus] <- min(pair)
clusters[[whClus]] <- unique(currentMat[, whClus])
# update bestARI
newARIs <- sapply((1:ncol(currentMat))[-whClus], function(j) {
mclust::adjustedRandIndex(currentMat[, whClus], currentMat[, j])
})
bestARI[whClus, -whClus] <- newARIs
bestARI[-whClus, whClus] <- newARIs
# tracking
merges <- rbind(merges, c(whClus, pair))
print(c(whClus, pair))
} else {
working <- FALSE
}
# If no more to merge in any of them, stop
if (sum(sapply(clusters, length) == 1) == length(clusters)) stop()
}
colnames(merges) <- c("clustering", "cluster1", "cluster2")
return(list("currentMat" = currentMat,
"merges" = merges))
}
p <- plotARIs(FinalARI) +
ggtitle("ARI after any merging")
library(tidyverse)
p <- plotARIs(FinalARI) +
ggtitle("ARI after any merging")
p
output="../Figures/"
p
ggtitle("ARI after merging, no unclustered cells"")
p <- plotARIs(FinalARI) +
ggtitle("ARI after merging, no unclustered cells")
p <- plotARIs(FinalARI) +
ggtitle("ARI after merging, no unclustered cells")
p
ggsave(paste0(output, "_Final_ARI_no_unclus.pdf"), p)
library(zinbwave)
plotARIs <- function(ARI, small = T) {
p <- ARI %>% as.data.frame() %>%
mutate(label = rownames(ARI)) %>%
gather(key = label2, value = ari, -(ncol(ARI) + 1)) %>%
ggplot(aes(x = label, y = label2, fill = ari)) +
geom_tile() +
scale_fill_viridis_c(limits = c(0, 1)) +
theme_classic() +
theme(axis.line = element_blank())
if (small) {
p <- p  +
geom_text(aes(label = round(ari, 2))) +
guides(fill = F)
}
return(p)
}
seurat_params <- function(seurat_ARI) {
tree <- as.dendrogram(hclust(dist(seurat_ARI)))
inds1 <- unlist(tree[[1]])
inds2 <- unlist(tree[[2]])
seurat_ARI1 <- seurat_ARI[inds1, inds1]
seurat_ARI2 <- seurat_ARI[inds2, inds2]
param1 <- names(which.max(colMeans(seurat_ARI1)))
param2 <- names(which.max(colMeans(seurat_ARI2)))
print(param1)
print(param2)
return(c(param1, param2))
}
mergeManyPairwise <- function(clusteringMatrix, nCores = 3) {
# Turn the matrix into a numeric matrix
clusMat <- apply(clusteringMatrix, 2, function(x) {
x[x != "-1"] <- as.numeric(factor(x[x != "-1"]))
x[x == "-1"] <- -1
x <- as.integer(x)
})
# Initialize the values
clusters <- apply(clusMat, 2, unique)
currentMat <- clusMat
baseARI <- apply(clusMat, 2, function(x) {
apply(clusMat, 2, function(y) {
mclust::adjustedRandIndex(x, y)
})
bestARI <- baseARI
working <- TRUE
merges <- NULL
# Try to see if any merge would increse
while (working) {
# Test all pairwise clusters to merge
# For every cluster label list
mergeResults <- mclapply(1:ncol(currentMat), function(whClus) {
clus <- currentMat[, whClus]
clusternames <- clusters[[whClus]]
clusPairs <- combn(clusternames[clusternames != -1], 2)
# For every pair of labels in that list
deltaARI <- apply(clusPairs, 2, function(pair) {
sapply((1:ncol(clusMat))[-whClus], function(otherClus) {
clus[clus %in% pair] <- max(clus) + 1
mclust::adjustedRandIndex(clus, currentMat[, otherClus])
})
}) - bestARI[whClus, -whClus]
return(colMeans(deltaARI))
}, mc.cores = nCores)
# Find best pair to merge
maxs <- sapply(mergeResults, max)
# Only merge if it improves ARI
if (max(maxs) > 0) {
whClus <- which.max(maxs)
# update clusters
clusternames <- clusters[[whClus]]
clusPairs <- combn(clusternames[clusternames != -1], 2)
pair <- clusPairs[, which.max(mergeResults[[whClus]])]
indsPair <- which(currentMat[, whClus] %in% pair)
currentMat[indsPair, whClus] <- min(pair)
clusters[[whClus]] <- unique(currentMat[, whClus])
# update bestARI
newARIs <- sapply((1:ncol(currentMat))[-whClus], function(j) {
mclust::adjustedRandIndex(currentMat[, whClus], currentMat[, j])
})
bestARI[whClus, -whClus] <- newARIs
bestARI[-whClus, whClus] <- newARIs
# tracking
merges <- rbind(merges, c(whClus, pair))
print(c(whClus, pair))
} else {
working <- FALSE
}
# If no more to merge in any of them, stop
if (sum(sapply(clusters, length) == 1) == length(clusters)) stop()
}
colnames(merges) <- c("clustering", "cluster1", "cluster2")
return(list("currentMat" = currentMat,
"merges" = merges))
}
clusMat <- readRDS("../../data/Smart-Seq/SMARTer_cells_MOp_Consensus_Clustering.rds")
clusMat <- clusMat$currentMat
genes <- rownames(clusMat[clusMat[,"Rsec"] == -1,])
View(clusMat)
genes <- which(clusMat[clusMat[,"Rsec"] == -1)
genes <- which(clusMat[,"Rsec"] == -1)
clusMat[clusMat[,"Rsec"] == -1, "RSEC"] <- paste("-1", genes, sep = "_")
paste("-1", genes, sep = "_")
clusMat[clusMat[,"Rsec"] == -1, "RSEC"]
clusMat[clusMat[,"Rsec"] == -1, "Rsec"] <- paste("-1", genes, sep = "_")
FinalARI <- apply(clusMat, 2, function(x) {
apply(clusMat, 2, function(y) {
mclust::adjustedRandIndex(x, y)
})
FinalARI
plotARIs(FinalARI)
library(tidyverse)
plotARIs(FinalARI)
p <- plotARIs(FinalARI) +
ggtitle("Final ARI, each unclustered cell is its own cluster")
ggsave(p, "../../Figures/Smart-Seq/SMARTer_cells_MOp_Final_ARI2.pdf")
ggsave("../../Figures/Smart-Seq/SMARTer_cells_MOp_Final_ARI2.pdf", p)
clusMat <- clusMat$currentMat
clusMat <- readRDS("../../data/Smart-Seq/SMARTer_cells_MOp_Consensus_Clustering.rds")
clusMat <- clusMat$currentMat
FinalARI <- apply(clusMat, 2, function(x) {
apply(clusMat, 2, function(y) {
mclust::adjustedRandIndex(x, y)
})
p <- plotARIs(FinalARI) +
ggtitle("Final ARI, each unclustered cell is its own cluster")
ggsave("../../Figures/Smart-Seq/SMARTer_cells_MOp_Final_ARI.pdf")
p <- plotARIs(FinalARI) +
ggtitle("Final ARI, unclustered cells count as one cluster")
ggsave("../../Figures/Smart-Seq/SMARTer_cells_MOp_Final_ARI.pdf")
library(Rtsne)
library(SingleCellExperiment)
library(tidyverse)
zinbDims <- seq(from = 10, to = 20, length.out = 5)
zinbDims <- seq(from = 8, to = 20, length.out = 5)
library(SummarizedExperiment)
library(SingleCellExperiment)
library(clusterExperiment)
